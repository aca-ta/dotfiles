syntax enable
"カラースキーマ
colorscheme hydrangea
let g:solarized_termcolors=256
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set t_Co=256
set t_ut=
set updatetime=1
set visualbell t_vb=
set mouse=a

set number
set smartindent
set expandtab
set shiftwidth=4
set tabstop=4
set ambiwidth=double
" タブ可視化と色設定
set list lcs=tab:\¦\ 
hi SpecialKey ctermbg=NONE ctermfg=NONE guibg=NONE guifg=#4e4e4e
"検索時に大文字小文字を区別しない
set ic
"バックアップをとらない
set nobackup
"スワップファイルを作らない
set noswapfile 
"入力中のコマンドを表示
set showcmd
"現在のモードを表示
set showmode
"コピー時にクリップボードを使用
"set clipboard=unnamedplus,autoselect
set clipboard+=unnamed,unnamedplus
"対応する括弧をハイライト
set showmatch
"バックスペースの挙動
"行頭で使用した場合、前の行と連結、インデントを削除
set backspace=eol,indent,start
" カーソルラインの強調表示を有効化
"set cursorline
" ステータスラインを常に表示
set laststatus=2 
" ステータスラインの内容
set statusline=%<%F\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}
set statusline+=%{fugitive#statusline()}
set statusline+=%=%l,%c%V%8P
set statusline+=%*
" インクリメンタル検索を有効化
set incsearch
" 検索文字をハイライト
set hlsearch 

" デフォルトの文字コード
set encoding=utf-8
set fileformat=unix
" 自動エンコード
set fileencoding=utf-8
set fileencodings=utf-8,iso-2022-jp,cp932,sjis,euc-jp
 
"タブ関連
set switchbuf+=usetab,newtab"
set showtabline=2
 
au BufNewFile,BufRead *.hql setlocal filetype=hive
au BufNewFile *.py 0r $HOME/.vim/template/template.py
au BufNewFile *.cpp 0r $HOME/.vim/template/template.cpp
au BufNewFile,BufRead *Jenkinsfile* setf groovy
au BufNewFile,BufRead *.qgs setf xml
au BufNewFile,BufRead *.plb setf sql
au BufNewFile *.sh 0r $HOME/.vim/template/template.sh

" XMLの対応カッコ移動
source $VIMRUNTIME/macros/matchit.vim

" Plug
silent! call plug#begin('~/.vim/plugged')
Plug 'autowitch/hive.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'w0rp/ale'
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'gorodinskiy/vim-coloresque'
Plug 'mattn/emmet-vim'
Plug 'mhartington/oceanic-next', {'do': 'cp colors/* ~/.vim/colors/'}
Plug 'yuttie/hydrangea-vim', {'do': 'cp colors/* ~/.vim/colors/'}
Plug 'tpope/vim-surround'
Plug 'ycm-core/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml'] }
Plug 'mechatroner/rainbow_csv'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'airblade/vim-gitgutter'
Plug 'leafgarland/typescript-vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'udalov/kotlin-vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'thinca/vim-quickrun'
Plug 'kana/vim-operator-replace'
Plug 'kana/vim-operator-user'
Plug 'JuliaLang/julia-vim'
Plug 'kannokanno/previm'
Plug 'tyru/open-browser.vim'
Plug 'posva/vim-vue'
Plug 'janko/vim-test'
Plug 'Townk/vim-autoclose'
Plug 'tpope/vim-repeat'
Plug 'Yggdroot/indentLine'
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
call plug#end()

" nerdtree
let NERDTreeShowHidden=1
nnoremap <silent><C-e> :NERDTreeToggle<CR><C-w>=

nnoremap +  <C-w>+
nnoremap -  <C-w>-
nnoremap \|  <C-w>\|
nnoremap _  <C-w>_
nnoremap =  <C-w>=
vnoremap > >gv
vnoremap < <gv

" YouCompleteMe
let g:ycm_goto_buffer_command = 'split-or-existing-window'
let g:ycm_global_ycm_extra_conf =  $HOME . '.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_path_to_python_interpreter = $HOME . '/.pyenv/versions/3.8.2/bin/python'
let g:ycm_autoclose_preview_window_after_insertion = 1

nnoremap tj :rightbelow vertical YcmCompleter GoTo<CR>
nnoremap gd :YcmCompleter GetDoc<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>
nnoremap gy :YcmCompleter GetType<CR>
nnoremap ref :YcmCompleter RefactorRename 

" gitgutter
let g:gitgutter_highlight_lines = 0
let g:gitgutter_max_signs = 1000

nnoremap gn :GitGutterNextHunk<CR>
nnoremap gp :GitGutterPrevHunk<CR>

" vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0

" go-vim
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 0

" ale
let g:ale_open_list = 1
let g:ale_list_window_size = 5
let g:ale_sign_column_always = 1
let g:ale_keep_list_window_open = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_loclist_msg_format = '[%linter%] %s'
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_linters = {'text': ['textlint']}
let g:ale_python_auto_pipenv = 1

nmap <silent> <C-p> :cprev<CR>
nmap <silent> <C-n> :cnext<CR>


" close a loclist when a window is closed
augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

" close a quickfix when a window is closed
augroup CloseQuickfixWindowGroup
  autocmd!
  autocmd WinEnter * if (winnr('$') == 1) && (getbufvar(winbufnr(0), '&buftype')) == 'quickfix' | quit | endif
augroup END

" vim-operator-replace
map r <Plug>(operator-replace)

" previm
let g:previm_open_cmd = ''

" vim-test
let test#strategy = "vimterminal"
let test#vim#term_position = "aboveleft"
let test#python#pytest#options = '-vv'

" https://stackoverflow.com/questions/24931088/disable-omnicomplete-or-ftplugin-or-something-in-vim
let g:omni_sql_no_default_maps = 1
